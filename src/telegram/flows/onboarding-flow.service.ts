import { BadRequestException, Injectable } from "@nestjs/common";
import { TelegramFlowStepInterface } from "../interfaces/telegram-flow-step.interface";
import { TelegramFlowKeyEnum } from "../enums/telegram-flow-key.enum";
import { UserService } from "src/user/services/user.service";
import { UserEntity } from "src/user/entities/user.entity";
import { UserProfileService } from "src/user/services/user-profile.service";
import { UserGenderEnum } from "src/user/enums/user-gender.enum";
import { UserWeightService } from "src/user/services/user-weight.service";
import { UserHeightService } from "src/user/services/user-height.service";
import { SendGridService } from "@anchan828/nest-sendgrid";
import { randomNumber } from "src/shared/utilities/random.utility";
import { UserEmailCodeService } from "src/user/services/user-code.service";
import { validateEmail } from "src/shared/utilities/email.utility";

const code = randomNumber(6);
console.log("üöÄ ~ TelegramOnboardingFlowService ~ code:", code);

@Injectable()
export class TelegramOnboardingFlowService {
  constructor(
    private userService: UserService,
    private userProfileService: UserProfileService,
    private userWeightService: UserWeightService,
    private userHeightService: UserHeightService,
    private userEmailCodeService: UserEmailCodeService,
    private readonly sendGridService: SendGridService
  ) {}

  getSteps(): TelegramFlowStepInterface[] {
    return [
      {
        key: TelegramFlowKeyEnum.START,
        message: "–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        field: "fullname",
        action: async (userId: string, value: { fullname: string }) => {
          const { fullname } = value;
          await this.userProfileService.update(userId, { fullname });
        },
      },
      {
        key: TelegramFlowKeyEnum.GENDER,
        message: "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª",
        field: "gender",
        action: async (userId: string, value: { gender: UserGenderEnum }) => {
          const { gender } = value;
          await this.userProfileService.update(userId, { gender });
        },
        buttons: [
          { label: "–ú—É–∂—Å–∫–æ–π", value: UserGenderEnum.MALE },
          { label: "–ñ–µ–Ω—Å–∫–∏–π", value: UserGenderEnum.FEMALE },
        ],
      },
      {
        key: TelegramFlowKeyEnum.WEIGHT,
        message: "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–ö–ì)",
        field: "weight",
        action: async (userId: string, value: { weight: number }) => {
          const { weight } = value;
          await this.userWeightService.create(userId, { weight });
        },
      },
      {
        key: TelegramFlowKeyEnum.HEIGHT,
        message: "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–°–ú), –Ω–∞–ø—Ä–∏–º–µ—Ä 160",
        field: "height",
        action: async (userId: string, value: { height: number }) => {
          const { height } = value;
          await this.userHeightService.create(userId, { height });
        },
      },
      {
        key: TelegramFlowKeyEnum.EMAIL,
        message:
          "–£–∫–∞–∂–∏—Ç–µ Email –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ Nutrinetic.",
        field: "email",
        action: async (userId: string, value: { email: string }) => {
          const { email } = value;
          const validEmail = validateEmail(email);
          const code = String(randomNumber(6));
          await this.userEmailCodeService.create({ userId, code });
          await this.sendGridService.send({
            to: validEmail,
            from: "noreply@hollandandbarrett.com",
            subject: "Verification Code",
            text: code,
          });
        },
      },
      {
        key: TelegramFlowKeyEnum.EMAIL_CODE,
        message:
          "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–∞—à Email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        field: "code",
        action: async (userId: string, value: { code: string }) => {
          const { code } = value;
          const userCodeExists = await this.userEmailCodeService.findOne({
            userId,
            code,
          });
          if (!userCodeExists)
            throw new BadRequestException({
              message: "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            });
          await this.userService.update(userId, { email_verified: true });
          await this.userEmailCodeService.softDelete(userCodeExists.id);
        },
      },
      {
        key: TelegramFlowKeyEnum.GOAL,
        message: "–ö–∞–∫–∏–µ –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ —Ü–µ–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å Nutrinetic?",
        field: "goal",
        action: async (userId: string, value: { goal: string[] }) => {
          console.log(value);
        },
        poll: {
          values: [
            "–£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–π –≤–µ—Å",
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
            "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∏–µ—Ç—É",
            "–°–Ω–∏–∑–∏—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç",
            "–£–ª—É—á—à–∏—Ç—å –∫–æ–∂—É",
            "–°–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞–ª–æ—Ä–∏—è–º–∏",
            "–£–±—Ä–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ",
          ],
          options: {
            is_anonymous: false,
            type: "regular",
            allows_multiple_answers: true,
          },
        },
      },
      {
        key: TelegramFlowKeyEnum.GOAL_COMMENT,
        message:
          "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Nutrinetic. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫ –Ω–∏–∂–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã",
        field: null,
        action: null,
      },
    ];
  }
}
